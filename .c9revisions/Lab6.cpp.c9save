{"ts":1352180896086,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Lamog, Rob\n//Lab #6A\n//Section #0245 MW 9am-11am\n\n#include <fstream>\n#include <iomanip>\n#include <iostream>\n#include <sstream>\n#include <string>\n\nusing namespace std;\n\nconst float adultStandard = 21.75;\nconst float adultDeluxe = 25.80;\nconst float childDiscount = 0.60;\nconst float tipAndTax = 0.18;\nconst float surcharge = 0.07;\nconst float discountA = 0.015;\nconst float discountB = 0.025;\nconst float discountC = 0.035;\n\nifstream inData;\nofstream outData, errorData;\n\n//Prototypes\nvoid openFiles(void);\nvoid billing(void);\nvoid custom_ErrorFlags(bool error_A, bool error_C, bool error_M, bool error_S, bool error_D, string adults, string children, string meal, string surcharge, string deposit);\nvoid billing_Statement(int adultsInt, int childrenInt, bool deluxeMeal, bool weekendSurcharge, float depositFloat);\nfloat calc_AdultStandardMeal(int adultsInt);\nfloat calc_ChildrenStandardMeal(int childrenInt);\nfloat calc_AdultDeluxeMeal(int adultsInt);\nfloat calc_ChildrenDeluxeMeal(int childrenInt);\nfloat calc_TipandTax(float mealSubTotal);\nfloat calc_Surcharge(float totalMeals);\nfloat calc_EarlyPaymentDiscount(float totalBill);\nvoid closeFiles(void);\n\nint main() {\n    openFiles();\n    billing();\n    closeFiles();\n\n\tsystem(\"pause\");\n\treturn 0;\n}\n\nvoid openFiles() {\n    //Open data file.\n    inData.open(\"C:\\\\temp\\\\Lab6\\\\data.txt\");\n\n\t//Checking for error opening data file.\n\tif (!inData) {\n\t\tcout << \"Cannot open file, terminating program.\" << endl;\n\t\texit (1);\n\t}\n\n    //New files.\n    outData.open(\"C:\\\\temp\\\\Lab6\\\\billingstatement.txt\");\n    errorData.open(\"C:\\\\temp\\\\Lab6\\\\billingerrorfile.txt\");\n}\n\nvoid billing() {\n    string adults, children, meal, surcharge, deposit; //Data string variables.\n    //Data converted variables.\n    int adultsInt, childrenInt;\n    bool deluxeMeal = false, weekendSurcharge = false;\n\tfloat depositFloat;\n\n\tbool error_A = false, error_C = false, error_M = false, error_S = false, error_D = false; //Custom error flags.\n    \n    while (inData >> adults >> children >> meal >> surcharge >> deposit) {\n\t//while (cin >> adults >> children >> meal >> surcharge >> deposit) {\n\t\tstringstream(adults) >> adultsInt;\n\t\tif (adultsInt < 0) error_A = true;\n\t\t\n\t\tstringstream(children) >> childrenInt;\n\t\tif (childrenInt < 0) error_C = true;\n\t\t\n\t\tif (meal == \"D\") deluxeMeal = true;\n\t\telse if (meal == \"S\") deluxeMeal = false;\n\t\telse error_M = true;\n\t\t\n\t\tif (surcharge == \"Y\") weekendSurcharge = true;\n\t\telse if (surcharge == \"N\") weekendSurcharge = false;\n\t\telse error_S = true;\n\t\t\n\t\tstringstream(deposit) >> depositFloat;\n\t\tif (depositFloat < 0.0) error_D = true;\n\t\t\n\t\tif (error_A || error_C || error_M || error_S || error_D) {\n\t\t\tcustom_ErrorFlags(error_A, error_C, error_M, error_S, error_D, adults, children, meal, surcharge, deposit);\n\t\t\t//Reset custom error flags before continuing.\n\t\t\terror_A = false, error_C = false, error_M = false, error_S = false, error_D = false;\n\t\t}\n\t\telse billing_Statement(adultsInt, childrenInt, deluxeMeal, weekendSurcharge, depositFloat);\n\t\t//cout << adults << \" \" << children << \" \" << meal << \" \" << surcharge << \" \" << deposit << endl;\n\t}\n}\t\t\n\nvoid custom_ErrorFlags(bool error_A, bool error_C, bool error_M, bool error_S, bool error_D, string adults, string children, string meal, string surcharge, string deposit) {\n    errorData << \"Adults: \" << adults << \" Children: \" << children << \" Meal: \"  << meal << \" Surcharge: \"  << surcharge << \" Deposit: $\"  << deposit << \" \"  << endl;\n\tif (error_A) errorData << \"Invalid number of adults.\" << endl;\n\tif (error_C) errorData << \"Invalid number of children.\" << endl;\n\tif (error_M) errorData << \"Invalid meal selection.\" << endl;\n\tif (error_S) errorData << \"Invalid surcharge entry.\" << endl;\n\tif (error_D) errorData << \"Invalid deposit entry.\" << endl;\n\terrorData << endl;\n}\n\nvoid billing_Statement(int adultsInt, int childrenInt, bool deluxeMeal, bool weekendSurcharge, float depositFloat) {\n\tfloat adultMealTotal, childrenMealTotal, mealSubTotal, tipAndTaxTotal, surchargeTotal = 0.0, totalMeals, totalBill, balance, earlyPaymentDiscount;\n\n\t//Deluxe Meal total.\n\tif (deluxeMeal) {\n\t\t//cout << \"Deluxe Meal\" << endl;\n\t\toutData << \"Deluxe Meal\" << endl;\n\t\tadultMealTotal = calc_AdultDeluxeMeal(adultsInt);\n\t\tchildrenMealTotal = calc_ChildrenDeluxeMeal(childrenInt);\n\t\tmealSubTotal = calc_AdultDeluxeMeal(adultsInt) + calc_ChildrenDeluxeMeal(childrenInt);\n\t\t//cout << \"Deluxe Meal: \" << mealTotal << \" = (\" << adultsInt << \" * \" << adultDeluxe << \") + ((\" << childrenInt << \" * \" << adultDeluxe << \") / \" << childDiscount << \")\" << endl;\n\t}\n\t//Standard Meal total.\n\telse {\n\t\t//cout << \"Standard Meal\" << endl;\n\t\toutData << \"Standard Meal\" << endl;\n\t\tadultMealTotal = calc_AdultStandardMeal(adultsInt);\n\t\t//cout << calc_AdultStandardMeal(adultsInt) << endl;\n\t\tchildrenMealTotal = calc_ChildrenStandardMeal(childrenInt);\n\t\t//cout << calc_ChildrenStandardMeal(childrenInt) << endl;\n\t\tmealSubTotal = calc_AdultStandardMeal(adultsInt) + calc_ChildrenStandardMeal(childrenInt);\n\t\t//cout << \"Standard Meal: \" << mealTotal << \" = (\" << adultsInt << \" * \" << adultDeluxe << \") + ((\" << childrenInt << \" * \" << adultDeluxe << \") / \" << childDiscount << \")\" << endl;\n\t}\n\n\ttipAndTaxTotal = calc_TipandTax(mealSubTotal);\n\ttotalMeals = mealSubTotal + tipAndTaxTotal;\n    //Only calculate surcharge if necessary.\n\tif (weekendSurcharge) surchargeTotal = calc_Surcharge(totalMeals);\n\ttotalBill = mealSubTotal + tipAndTaxTotal + surchargeTotal;\n\tbalance = totalBill - depositFloat;\n    //Balance could be negative, which means no discount.\n\tif (balance > 0.0) earlyPaymentDiscount = calc_EarlyPaymentDiscount(totalBill);\n\telse earlyPaymentDiscount = 0.0;\n\t\n\t//cout.precision(2);\n\toutData.precision(2);\n\toutData << fixed << \"# of Adults: \\t\" << setw(4) << adultsInt << \"\\tCost: \\t\\t$\" << setw(8) << adultMealTotal << endl\n\t\t<< \"# of Children: \\t\" << setw(4) << childrenInt << \"\\tCost: \\t\\t$\" << setw(8) << childrenMealTotal << endl\n\t\t<< \"\\t\\t\\tSubtotal: \\t$\" << setw(8) << mealSubTotal << endl\n\t\t<< \"\\t\\t\\tTip and Tax: \\t$\" << setw(8) << tipAndTaxTotal << endl\n\t\t<< \"\\t\\t\\tSurchage: \\t$\" << setw(8) << surchargeTotal << endl\n\t\t<< \"\\t\\t\\tTotal Bill: \\t$\" << setw(8) << totalBill << endl\n        << \"\\t\\t\\tDeposit: \\t$\" << setw(8) << -(depositFloat) << endl << endl\n\t\t<< \"\\tOutstanding Balance: $\" << balance << endl\n\t\t<< \"Early payment Discount if paid within 10 days: $\" << earlyPaymentDiscount << endl << endl;\n}\n\nfloat calc_AdultStandardMeal(int adultsInt) {\t\n\tfloat adultMealTotal;\n\tadultMealTotal = adultsInt * adultStandard;\n\treturn(adultMealTotal);\n}\n\nfloat calc_ChildrenStandardMeal(int childrenInt) {\t\n\tfloat childrenMealTotal;\n\tchildrenMealTotal = (childrenInt * adultStandard) * childDiscount;\n\treturn(childrenMealTotal);\n}\n\nfloat calc_AdultDeluxeMeal(int adultsInt) {\n\tfloat adultMealTotal;\n\tadultMealTotal = adultsInt * adultDeluxe;\n\treturn(adultMealTotal);\n}\n\nfloat calc_ChildrenDeluxeMeal(int childrenInt) {\n\tfloat childrenMealTotal;\n\tchildrenMealTotal = (childrenInt * adultDeluxe) * childDiscount;\n\treturn(childrenMealTotal);\n}\n\nfloat calc_TipandTax(float mealSubTotal) {\t\n\tfloat tipAndTaxTotal;\n\ttipAndTaxTotal = mealSubTotal * tipAndTax;\n\treturn(tipAndTaxTotal);\n}\n\nfloat calc_Surcharge(float totalMeals) {\n\tfloat surchargeTotal;\n\tsurchargeTotal = totalMeals * surcharge;\n\treturn(surchargeTotal);\n}\n\nfloat calc_EarlyPaymentDiscount(float totalBill) {\n\tfloat earlyPaymentDiscount;\n    if (totalBill > 0.0) {\n\t\tif (totalBill < 100.0) earlyPaymentDiscount = -(totalBill * discountA);\n\t\tif ((totalBill >= 100.0) && (totalBill < 400.0)) earlyPaymentDiscount = -(totalBill * discountB);\n\t\tif (totalBill >= 400.0) earlyPaymentDiscount = -(totalBill * discountC);\n\t}\n\treturn(earlyPaymentDiscount);\n}\n\nvoid closeFiles() {\n\tinData.close();\n\toutData.close();\n\terrorData.close();\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":7786}]],"length":7786}
{"contributors":[],"silentsave":false,"ts":1352268895940,"patch":[[{"diffs":[[0,"les();\n\n"],[-1,"\t"],[1,"    "],[0,"system(\""]],"start1":1215,"start2":1215,"length1":17,"length2":20}]],"length":7789,"saved":false}
