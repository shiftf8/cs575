{"ts":1352268788305,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Lamog, Rob\n//March 7, 2012 Lab #3B\n//Section #0245 MW 9am-11am\n\n#include <iostream>\n#include <math.h>\n#include <string>\n\nusing namespace std;\n\nint main()\n{\n    string initials;\n\tdouble a, b, c, cosA, cosB, cosC;\n\tconst float PI = 3.14159;\n\t\n\tcout << \"Please enter your initials (FirstMiddleLast) without spaces or punctuation. \\n\";\n\tcin >> initials;\n\t//cout << initials << endl;\n\tcout << \"Please enter three lengths (number number number) separated by spaces, to create a triangle. \\n\";\n\tcin >> a >> b >> c;\n\t//cout << a << \" \" << b << \" \" << c << endl;\n\t\n\t//Checking to see the values entered can make a triangle. If NOT, stop program.\n\t//Ask professor if this actually saves cycles? Does not save cycles.\n\tif ((a < 1) || (b < 1) || (c < 1))\n\t\tcout << endl << initials << \", you have entered dimensions that cannot make a triangle. Please re-run the program to try again. \\n\";\n\telse\n\t{\n\t\tif (!(a + b > c) || !(b + c > a) || !(c + a > b))\n\t\t//The following expression is easier to read compared to the one above. Thanks dad. But C++ doesn't like multiple relations even with proper parentheses.\n\t\t//if (((a + b > c) || (b + c > a) || (c + a > b)) != true)\n\t\t\tcout << endl << initials << \", you have entered dimensions that cannot make a triangle. Please re-run the program to try again. \\n\";\n\t\telse\n\t\t{\n\t\t\t//Checking if triangle is equilateral. If TRUE, display output for equilateral triangle.\n\t\t\tif ((a == b) && (b == c))\n\t\t\t\tcout << endl << initials << \", you have entered the values of an equilateral triangle with \" << a << \" as the length of each side. \\n\";\n\t\t\telse\n\t\t\t{\n\t\t\t\t//Calculate if triangle has a right angle using law of cosines.\n\t\t\t\tcosC = acos((pow(a, 2) + pow(b, 2) - pow(c, 2))/(2*a*b));\n\t\t\t\t//cout << cosC << endl;\n\t\t\t\tif ((cosC > 1.5707 && cosC < 1.58))\n\t\t\t\t\tcosC = 1;\n\t\t\t\tcosB = acos((pow(c, 2) + pow(a, 2) - pow(b, 2))/(2*c*a));\n\t\t\t\t//cout << cosB << endl;\n\t\t\t\tif ((cosB > 1.5707 && cosB < 1.58))\n\t\t\t\t\tcosB = 1;\n\t\t\t\tcosA = acos((pow(b, 2) + pow(c, 2) - pow(a, 2))/(2*b*c));\n\t\t\t\t//cout << cosA << endl;\n\t\t\t\tif ((cosA > 1.5707 && cosA < 1.58))\n\t\t\t\t\tcosA = 1;\n\t\t\t\t\n\t\t\t\t//Check if triangle has a 90 degree angle. If NOT, output isosceles or scalene.\n\t\t\t\tif ((cosA == 1) || (cosB == 1) || (cosC == 1))\n\t\t\t\t{\n\t\t\t\t\t//Check if triangle is isosceles right triangle. If NOT, it must be a scalene right triangle.\n\t\t\t\t\tif ((a == b) || (b == c) || (c == a))\n\t\t\t\t\t\tcout << endl << initials << \", this is an isosceles right triangle with (\" << a << \", \" << b << \", \" << c << \") as the lengths of each side. \\n\";\n\t\t\t\t\telse\n\t\t\t\t\t\tcout << endl << initials << \", this is a scalene right triangle with (\" << a << \", \" << b << \", \" << c << \") as the lengths of each side. \\n\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t//Check if triangle is isosceles. If NOT, it must be a scalene triangle.\n\t\t\t\t\tif ((a == b) || (b == c) || (c == a))\n\t\t\t\t\t\tcout << endl << initials << \", this is an isosceles triangle with (\" << a << \", \" << b << \", \" << c << \") as the lengths of each side. \\n\";\n\t\t\t\t\telse\n\t\t\t\t\t\tcout << endl << initials << \", this is a scalene triangle with (\" << a << \", \" << b << \", \" << c << \") as the lengths of each side. \\n\";\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t}\n\tsystem(\"pause\");\n\treturn 0;\n}"]],"start1":0,"start2":0,"length1":0,"length2":3171}]],"length":3171}
{"contributors":[],"silentsave":false,"ts":1352268791158,"patch":[[{"diffs":[[0,"\n\t\t}\n\t}\n"],[1,"//"],[0,"\tsystem("]],"start1":3133,"start2":3133,"length1":16,"length2":18}]],"length":3173,"saved":false}
