{"ts":1352175095362,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Lamog, Rob\r\n//Lab #8A\r\n//Section #0245 MW 9am-11am\r\n\r\n#include <fstream>\r\n#include <iomanip>\r\n#include <iostream>\r\n#include <sstream>\r\n#include <string>\r\n\r\n#define l 50 //Default array length\r\n\r\nusing namespace std;\r\n\r\nstruct houseData {\r\n    string id; //Household ID\r\n    double income; //Household Income\r\n\tint members; //# of Members in Household\r\n} household[l];\r\n\r\nvoid openFiles(void);\r\nvoid menuQuery(void); //Menu app.\r\nvoid displayMenu(void); //Display menu options.\r\nvoid selOutput(int selectedOption, int i); //User selection output.\r\nint grabData(void); //Returning count of struct household array.\r\nvoid dataManipA(int i); //Output list of all household data.\r\nvoid dataManipB(int i); //Output list of household income above average.\r\ndouble findMean(houseData household[], int i); //Returning average household income.\r\nvoid dataManipC(int i); //Output percentage of households below poverty level.\r\nvoid dataManipD(int i); //Output sorted list of households by income.\r\nvoid dataManipE(int i); //Output median household income.\r\nvoid closeFiles(void);\r\n\r\nifstream inData;\r\n\r\nint main() {\r\n\topenFiles();\r\n\tmenuQuery();\r\n\tcloseFiles();\r\n\t\r\n\tsystem(\"pause\");\r\n\treturn 0;\r\n}\r\n\r\nvoid openFiles() {\r\n\t//Open data file.\r\n\tinData.open(\"data.txt\");\r\n\t//Checking for error opening data file.\r\n\tif (!inData) {\r\n\t\tcout << \"Cannot open file. Terminating program.\" << endl;\r\n\t\tsystem(\"pause\");\r\n\t\texit (1);\r\n\t}\r\n}\r\n\r\nint grabData() {\r\n\tstring houseID, houseIncome, iMembers;\r\n\tint i = 0; //Counter\r\n\r\n\twhile (inData >> houseID >> houseIncome >> iMembers) {\r\n\t\t//Put House Data into struct houseData array.\r\n\t\thousehold[i].id = houseID;\r\n\t\t//cout << i << \" \" << household[i].id << \" \" << houseID << \" \";\r\n\t\t//Convert houseIncome to double.\r\n\t\tstringstream(houseIncome) >> household[i].income;\r\n\t\t//cout << household[i].income << \" \" << houseIncome << \" \";\r\n\t\t//Convert iMembers to int.\r\n\t\tstringstream(iMembers) >> household[i].members;\r\n\t\t//cout << household[i].members << \" \" << iMembers << endl;\r\n\t\ti++;\r\n\t}\r\n\t\r\n/*\t//Temp explicit array initialization.\r\n\thousehold[0].id = \"WHVC\";\r\n\thousehold[1].id = \"AAAA\";\r\n\thousehold[2].id = \"BURB\";\r\n\thousehold[3].id = \"CCCC\";\r\n\thousehold[4].id = \"DATA\";\r\n\thousehold[5].id = \"EEEE\";\r\n\thousehold[6].id = \"FADE\";\r\n\thousehold[7].id = \"GATE\";\r\n\thousehold[8].id = \"HILO\";\r\n\r\n\thousehold[0].income = 34000.00;\r\n\thousehold[1].income = 10500.00;\r\n\thousehold[2].income = 23500.00;\r\n\thousehold[3].income = 150000.00;\r\n\thousehold[4].income = 8000.00;\r\n\thousehold[5].income = 36000.00;\r\n\thousehold[6].income = 8500.00;\r\n\thousehold[7].income = 25000.00;\r\n\thousehold[8].income = 3000.00;\r\n\t\r\n\thousehold[0].members = 5;\r\n\thousehold[1].members = 8;\r\n\thousehold[2].members = 2;\r\n\thousehold[3].members = 4;\r\n\thousehold[4].members = 3;\r\n\thousehold[5].members = 5;\r\n\thousehold[6].members = 4;\r\n\thousehold[7].members = 1;\r\n\thousehold[8].members = 1;*/\r\n\r\n\t//cout << household[0].id << \" \" << household[0].income << \" \" << household[0].members << endl;\r\n\t\r\n\treturn(i);\r\n}\r\n\r\nvoid menuQuery() {\r\n\tstring str;\r\n\tint selectedOption;\r\n\tint i; //Total of entries in data struct houseData household[]\r\n\t\r\n\t//Grabbing data entries from file. Put total count in i.\r\n\ti = grabData();\r\n\t\r\n\twhile (str != \"Exit\") {\r\n\t\t//Initialize valid input flag and options.\r\n\t\tbool inputValid = false;\r\n\t\tselectedOption = 0;\r\n\r\n\t\tdisplayMenu();\r\n\t\tcin >> str;\r\n\t\tcout << endl;\r\n\t\tif (str == \"Exit\") {\r\n\t\t\tcout << \"Exiting app. Have a great day.\" << endl;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t//Checking input and flagging for valid input.\r\n\t\tif ((str == \"a\") || (str == \"A\")) {\r\n\t\t\t//cout << str << endl;\r\n\t\t\tselectedOption = 1;\r\n\t\t\tinputValid = true;\r\n\t\t}\r\n\t\tif ((str == \"b\") || (str == \"B\")) {\r\n\t\t\tselectedOption = 2;\r\n\t\t\tinputValid = true;\r\n\t\t}\r\n\t\tif ((str == \"c\") || (str == \"C\")) {\r\n\t\t\tselectedOption = 3;\r\n\t\t\tinputValid = true;\r\n\t\t}\r\n\t\tif ((str == \"d\") || (str == \"D\")) {\r\n\t\t\tselectedOption = 4;\r\n\t\t\tinputValid = true;\r\n\t\t}\r\n\t\tif ((str == \"e\") || (str == \"E\")) {\r\n\t\t\tselectedOption = 5;\r\n\t\t\tinputValid = true;\r\n\t\t}\r\n\t\t\r\n\t\tif (!inputValid) cout << \"You have made an invalid entry. Please enter a proper selection.\" << endl;\r\n\t\telse selOutput(selectedOption, i);\r\n\t\t\t//cout << selectedOption << endl;\r\n\t}\r\n}\r\n\r\nvoid displayMenu() {\r\n//\tcout << \"Menu\" << endl; //Temp menu\r\n\tcout << \"Please make a selection from the following menu options:\" << endl\r\n\t\t<< \"(A) Display all input data formatted with columns and column headers.\" << endl\r\n\t\t<< \"(B) Display households with income greater than average household income.\" << endl\r\n\t\t<< \"(C) Display percentage of households below poverty level.\" << endl\r\n\t\t<< \"(D) Display all input data sorted by household income.\" << endl\r\n\t\t<< \"(E) Display the median household income.\" << endl\r\n\t\t<< \"Type a letter corresponding to your selection or type 'Exit' to quit, then press enter.\" << endl;\r\n}\r\n\r\nvoid selOutput(int selectedOption, int i) {\r\n\tif (selectedOption == 1) dataManipA(i);\r\n\tif (selectedOption == 2) dataManipB(i);\r\n\tif (selectedOption == 3) dataManipC(i);\r\n\tif (selectedOption == 4) dataManipD(i);\r\n\tif (selectedOption == 5) dataManipE(i);\r\n}\r\n\r\nvoid dataManipA(int i) {\r\n\tint j; //Counter\r\n\t\r\n\tcout << \"Option A: ALL Households, Income, and # of Members in Household.\" << endl\r\n\t\t<< \"Household ID\" << \"\\tHousehold Income\" << \"\\t# of Members\" << endl;\r\n\t\r\n\tfor (j = 0; j < i; j++) {\r\n\t\tcout.precision(2);\r\n\t\tcout << fixed << setw(12) << left << household[j].id << \"\\t$\" << setw(15) << right << household[j].income << \"\\t\" << left << household[j].members << endl;\r\n\t}\r\n\tcout << endl;\r\n}\r\n\r\nvoid dataManipB(int i) {\r\n\tdouble mean; //Average household income.\r\n\tint j; //Counter\r\n\t\r\n\tmean = findMean(household, i);\r\n\t//cout << mean << endl;\r\n\t\r\n\tcout.precision(2);\r\n\tcout << fixed << \"Option B: Households Above Average Income\" << endl\r\n\t\t<< \"Average Household Income: $\" << mean << endl\r\n\t\t<< \"Household ID\" << \"\\tHousehold Income\" << endl;\t\r\n\tfor (j = 0; j < i; j++) {\r\n\t\tif (household[j].income > mean) {\r\n\t\t\tcout << setw(12) << left << household[j].id << \"\\t$\" << setw(15) << right << household[j].income << endl;\r\n\t\t}\r\n\t}\r\n\tcout << endl;\r\n}\r\n\r\ndouble findMean(houseData household[], int i) {\r\n\tdouble average, total = 0.0;\r\n\tint j; //Counter\r\n\t\r\n\tfor (j = 0; j < i; j++) {\r\n\t\ttotal = total + household[j].income;\r\n\t}\r\n\taverage = total / j;\r\n\t//cout << \"Average: \" << average << endl;\r\n\treturn(average);\r\n}\r\n\r\nvoid dataManipC(int i) {\r\n\tfloat P; //Poverty level.\r\n\tfloat x; //Counter, forcing float data type.\r\n\tdouble percent; //Percent of households below poverty level.\r\n\tint j; //Counter\r\n\t\r\n\tcout << \"Option C: Percentage of households below poverty level.\" << endl;\r\n\tfor (j = 0, x = 0; j < i; j++) {\r\n\t\tP = 8000.00 + (500.00 * (household[j].members - 2));\r\n\t\tif (household[j].income < P) {\r\n\t\t\tx++;\r\n\t\t\t//cout << \"Poverty Level: \" << P << \"\\tIncome: \" << household[j].income << endl;\r\n\t\t}\r\n\t}\r\n\t//cout << x << \" \" << j << endl;\r\n\tpercent = (x / j) * 100;\r\n\tcout.precision(2);\r\n\tcout << fixed << percent << \"% of households are below poverty level.\" << endl << endl;\r\n}\r\n\r\nvoid dataManipD(int i) {\r\n\t//Temp storage for swapping.\r\n\tstring tempString;\r\n\tdouble tempDouble;\r\n\tint tempInt;\r\n\tint d = i;\r\n\tint j, flag = 1; //Counter and flag to confirm swap.\r\n\t\r\n\tcout << \"Option D: Data sorted by household income.\" << endl\r\n\t\t<< \"Household ID\" << \"\\tHousehold Income\" << \"\\t# of Members\" << endl;\r\n\t//Shell sort.\r\n\twhile(flag || (d > 1)) {\r\n\t\tflag = 0;\r\n\t\td = (d+1) / 2;\r\n\t\tfor (j = 0; j < (i - d); j++) {\r\n\t\t\tif (household[j + d].income > household[j].income) {\r\n\t\t\t\t//Swap Household Income Array\r\n\t\t\t\ttempDouble = household[j + d].income;\r\n\t\t\t\thousehold[j + d].income = household[j].income;\r\n\t\t\t\thousehold[j].income = tempDouble;\r\n\t\t\t\t//Swap Household ID - Parallel Array\r\n\t\t\t\ttempString = household[j + d].id;\r\n\t\t\t\thousehold[j + d].id = household[j].id;\r\n\t\t\t\thousehold[j].id = tempString;\r\n\t\t\t\t//Swap Number of Members in Household - Parallel Array\r\n\t\t\t\ttempInt = household[j + d].members;\r\n\t\t\t\thousehold[j + d].members = household[j].members;\r\n\t\t\t\thousehold[j].members = tempInt;\r\n\t\t\t\t\r\n\t\t\t\tflag = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor (j = 0; j < i; j++) {\r\n\t\tcout.precision(2);\r\n\t\tcout << fixed << setw(12) << left << household[j].id << \"\\t$\" << setw(15) << right << household[j].income << \"\\t\" << left << household[j].members << endl;\r\n\t}\r\n\tcout << endl;\r\n}\r\n\r\nvoid dataManipE(int i) {\r\n\t//Temp storage for swapping.\r\n\tstring tempString;\r\n\tdouble tempDouble, average;\r\n\tint tempInt;\r\n\tint d = i;\r\n\tint j, flag = 1; //Counter and flag to confirm swap.\r\n\t\r\n\tcout << \"Option E: Median household income.\" << endl;\r\n\t//Shell sort.\r\n\twhile(flag || (d > 1)) {\r\n\t\tflag = 0;\r\n\t\td = (d+1) / 2;\r\n\t\tfor (j = 0; j < (i - d); j++) {\r\n\t\t\tif (household[j + d].income > household[j].income) {\r\n\t\t\t\t//Swap Household Income Array\r\n\t\t\t\ttempDouble = household[j + d].income;\r\n\t\t\t\thousehold[j + d].income = household[j].income;\r\n\t\t\t\thousehold[j].income = tempDouble;\r\n\t\t\t\t//Swap Household ID - Parallel Array\r\n\t\t\t\ttempString = household[j + d].id;\r\n\t\t\t\thousehold[j + d].id = household[j].id;\r\n\t\t\t\thousehold[j].id = tempString;\r\n\t\t\t\t//Swap Number of Members in Household - Parallel Array\r\n\t\t\t\ttempInt = household[j + d].members;\r\n\t\t\t\thousehold[j + d].members = household[j].members;\r\n\t\t\t\thousehold[j].members = tempInt;\r\n\t\t\t\t\r\n\t\t\t\tflag = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (i % 2) {\r\n\t\tj = i / 2;\r\n\t\taverage = household[j].income;\r\n\t}\r\n\telse {\r\n\t\tj = i / 2;\r\n\t\taverage = (household[j].income + household[j - 1].income) / 2.0;\r\n\t}\r\n\t\r\n\tcout.precision(2);\r\n\tcout << fixed << \"$\" << average << \" is the median household income.\" << endl << endl;\r\n}\r\n\r\nvoid closeFiles() {\r\n\tinData.close();\r\n}\r\n\r\n/*\r\nPlease make a selection from the following menu options:\r\n(A) Display all input data formatted with columns and column headers.\r\n(B) Display households with income greater than average household income.\r\n(C) Display percentage of households below poverty level.\r\n(D) Display all input data sorted by household income.\r\n(E) Display the median household income.\r\nType a letter corresponding to your selection or type 'Exit' to quit, then press\r\n enter.\r\na\r\n\r\nOption A: ALL Households, Income, and # of Members in Household.\r\nHousehold ID    Household Income        # of Members\r\nWHVC            $       34000.00        5\r\nAAAA            $       10500.00        8\r\nBURB            $       23500.00        2\r\nCCCC            $       15000.00        4\r\nDATA            $        8000.00        3\r\nEEEE            $       36000.00        5\r\nFADE            $        8500.00        4\r\nGATE            $       25000.00        1\r\nHILO            $        3000.00        1\r\nJURY            $      100000.00        5\r\nKNEL            $       80000.00        4\r\nLIST            $       41000.00        3\r\nMEMM            $        5000.00        2\r\nPQRS            $       18000.00        2\r\nRELM            $       27500.00        4\r\nSOLD            $       22100.00        2\r\n\r\nPlease make a selection from the following menu options:\r\n(A) Display all input data formatted with columns and column headers.\r\n(B) Display households with income greater than average household income.\r\n(C) Display percentage of households below poverty level.\r\n(D) Display all input data sorted by household income.\r\n(E) Display the median household income.\r\nType a letter corresponding to your selection or type 'Exit' to quit, then press\r\n enter.\r\nb\r\n\r\nOption B: Households Above Average Income\r\nAverage Household Income: $28568.75\r\nHousehold ID    Household Income\r\nWHVC            $       34000.00\r\nEEEE            $       36000.00\r\nJURY            $      100000.00\r\nKNEL            $       80000.00\r\nLIST            $       41000.00\r\n\r\nPlease make a selection from the following menu options:\r\n(A) Display all input data formatted with columns and column headers.\r\n(B) Display households with income greater than average household income.\r\n(C) Display percentage of households below poverty level.\r\n(D) Display all input data sorted by household income.\r\n(E) Display the median household income.\r\nType a letter corresponding to your selection or type 'Exit' to quit, then press\r\n enter.\r\nc\r\n\r\nOption C: Percentage of households below poverty level.\r\n31.25% of households are below poverty level.\r\n\r\nPlease make a selection from the following menu options:\r\n(A) Display all input data formatted with columns and column headers.\r\n(B) Display households with income greater than average household income.\r\n(C) Display percentage of households below poverty level.\r\n(D) Display all input data sorted by household income.\r\n(E) Display the median household income.\r\nType a letter corresponding to your selection or type 'Exit' to quit, then press\r\n enter.\r\nd\r\n\r\nOption D: Data sorted by household income.\r\nHousehold ID    Household Income        # of Members\r\nJURY            $      100000.00        5\r\nKNEL            $       80000.00        4\r\nLIST            $       41000.00        3\r\nEEEE            $       36000.00        5\r\nWHVC            $       34000.00        5\r\nRELM            $       27500.00        4\r\nGATE            $       25000.00        1\r\nBURB            $       23500.00        2\r\nSOLD            $       22100.00        2\r\nPQRS            $       18000.00        2\r\nCCCC            $       15000.00        4\r\nAAAA            $       10500.00        8\r\nFADE            $        8500.00        4\r\nDATA            $        8000.00        3\r\nMEMM            $        5000.00        2\r\nHILO            $        3000.00        1\r\n\r\nPlease make a selection from the following menu options:\r\n(A) Display all input data formatted with columns and column headers.\r\n(B) Display households with income greater than average household income.\r\n(C) Display percentage of households below poverty level.\r\n(D) Display all input data sorted by household income.\r\n(E) Display the median household income.\r\nType a letter corresponding to your selection or type 'Exit' to quit, then press\r\n enter.\r\ne\r\n\r\nOption E: Median household income.\r\n$22800.00 is the median household income.\r\n\r\nPlease make a selection from the following menu options:\r\n(A) Display all input data formatted with columns and column headers.\r\n(B) Display households with income greater than average household income.\r\n(C) Display percentage of households below poverty level.\r\n(D) Display all input data sorted by household income.\r\n(E) Display the median household income.\r\nType a letter corresponding to your selection or type 'Exit' to quit, then press\r\n enter.\r\nExit\r\n\r\nExiting app. Have a great day.\r\nPress any key to continue . . .\r\n*/"]],"start1":0,"start2":0,"length1":0,"length2":14483}]],"length":14483}
